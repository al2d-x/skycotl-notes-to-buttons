#main/exporter.py

"""
HTML exporter
=============
Builds a static HTML page representing the mapped bars using a selected
icon profile. Resolves relative paths to numbered PNG icons.

Exports:
- export_html_stack(mapping, out_html, title, profile) -> Path
"""


from __future__ import annotations
from pathlib import Path
from typing import Dict, List, Union, Optional
import os
import logging
import base64, mimetypes


from profiles import get_profile, Profile

ActiveMapOut = Dict[int, Union[List[int], str]]

def _icon_src(num: int, out_dir: Path, profile: Profile, mode: str = "data") -> Optional[str]:
    p = profile.icon_path(num)
    if not p:
        return None
    p = Path(p)
    if mode == "data":
        try:
            b = p.read_bytes()
        except OSError:
            return None
        mime = mimetypes.guess_type(str(p))[0] or "image/png"
        b64 = base64.b64encode(b).decode("ascii")
        return f"data:{mime};base64,{b64}"
    else:
        return Path(os.path.relpath(p, out_dir)).as_posix()


def export_html_stack(mapping: ActiveMapOut,
                      out_html: str | Path = None,
                      title: str = "Harp Export",
                      profile: str = "") -> Path:
    """Write the export HTML and return its path."""
    prof = get_profile(profile)

    if out_html is None:
        out_html = Path(__file__).resolve().parents[1] / "export" / "export.html"
    out_html = Path(out_html)
    out_dir = out_html.parent
    out_dir.mkdir(parents=True, exist_ok=True)

    logging.info("Generating HTML (%s) with profile '%s'", out_html, prof.key)

    css = """
    * { box-sizing:border-box; }
    body { background:#1e242b; color:#dfe3e6; font-family:ui-sans-serif,system-ui,Segoe UI,Arial; margin:0; padding:18px; }
    h1 { font-size:22px; margin:0 0 4px; font-weight:700; letter-spacing:.2px; }
    .sub { color:#9fb3c8; font-size:12px; margin:0 0 14px; opacity:.8; }

    .wrap { display:flex; flex-wrap:wrap; gap:12px; }
    .card { flex:0 0 120px; max-width:120px; background:transparent; border:1px solid #1b1e22; border-radius:12px; padding:6px; }
    .title { margin:0 0 6px; font-size:13px; color:#98f5c4; font-weight:700; opacity:.9; }

    .stack { display:flex; flex-direction:column; gap:6px; padding:2px 0; }
    .icon { width:80px; height:80px; object-fit:contain; border-radius:6px; background:#0f1113; box-shadow:0 1px 1px rgba(0,0,0,.45); }

    .badge { display:flex; align-items:center; justify-content:center;
             width:80px; height:80px; border-radius:6px; background:#0f1113;
             border:1px solid #2a2f34; font-weight:700; font-size:22px; }
    .rest { border:1px dashed #2a2f34; border-radius:8px; padding:8px; color:#8b929a; font-style:italic; text-align:center; font-size:12px; }
    footer { margin-top:12px; font-size:12px; color:#8b929a; }
    """

    html: List[str] = []
    html.append("<!doctype html><html><head><meta charset='utf-8'>")
    html.append(f"<title>{title}</title><style>{css}</style></head><body>")
    html.append(f"<h1>{title}</h1>")
    html.append(f"<div class='sub'>Profile: {prof.label}</div>")
    html.append("<div class='wrap'>")

    for t_idx in sorted(mapping.keys()):
        val = mapping[t_idx]
        html.append("<div class='card'>")
        html.append(f"<div class='title'>Bar {t_idx}</div>")

        if val == "noValue":
            html.append(f"<div class='rest'>{prof.rest_label}</div>")
        else:
            html.append("<div class='stack'>")
            for num in val:  # numbers 1..15
                src = _icon_src(num, out_dir, prof)
                label = prof.display_name_for(num)
                if src:
                    html.append(f"<img class='icon' src='{src}' alt='{label}' title='{label}' />")
                else:
                    if prof.text_fallback:
                        html.append(f"<div class='badge' title='{label}'>{label}</div>")
                    else:
                        html.append("<span class='icon' aria-hidden='true'></span>")
            html.append("</div>")
        html.append("</div>")

    html.append("</div><footer>Generated by exporter.py</footer></body></html>")
    out_html.write_text("".join(html), encoding="utf-8")
    return out_html
